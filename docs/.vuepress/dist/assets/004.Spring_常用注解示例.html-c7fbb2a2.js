import{_ as n,o as s,c as a,e}from"./app-d035ab8f.js";const t={},p=e(`<h1 id="spring-常用注解示例" tabindex="-1"><a class="header-anchor" href="#spring-常用注解示例" aria-hidden="true">#</a> Spring 常用注解示例</h1><h2 id="组件扫描策略注解-componentscan" tabindex="-1"><a class="header-anchor" href="#组件扫描策略注解-componentscan" aria-hidden="true">#</a> 组件扫描策略注解 <code>@ComponentScan</code></h2><p>事实上，我们可以在定义<code>MainConfig</code> 方法中添加 <code>@ComponentScan</code> 注解来定义扫描的信息,比如,排除的Bean等等</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token comment">// 配置组件扫描信息的包名</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;com.zhoutao123.spring&quot;</span><span class="token punctuation">,</span> 
	<span class="token comment">// 定义排除的Bean的过滤器，排除Controller注解的Bean以及BookService类型的Bean</span>
   excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">BookService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ASSIGNABLE_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> includeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>
   <span class="token comment">// 定义包含过滤器，包含BookService类型的Bean，注意需要设置使用默认过滤器为false，否则不生效</span>
    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">BookService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ASSIGNABLE_TYPE</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> useDefaultFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>
  <span class="token comment">//....</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>过滤类型的枚举包含以下方式</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">FilterType</span> <span class="token punctuation">{</span>
	<span class="token constant">ANNOTATION</span><span class="token punctuation">,</span> <span class="token comment">// 按照注解的方式过滤</span>
	<span class="token constant">ASSIGNABLE_TYPE</span><span class="token punctuation">,</span> <span class="token comment">// 按照类型的方式过滤</span>
	<span class="token constant">ASPECTJ</span><span class="token punctuation">,</span> <span class="token comment">// 按照ASPECTJ方法过滤</span>
	<span class="token constant">REGEX</span><span class="token punctuation">,</span> <span class="token comment">// 按照正则方法过滤Beand的类型</span>
	<span class="token constant">CUSTOM</span> <span class="token comment">// 定义过滤，实现 org.springframework.core.type.filter.TypeFilter 接口</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如下面可以自定义一个过滤器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomTypeFilter</span> <span class="token keyword">implements</span> <span class="token class-name">TypeFilter</span> <span class="token punctuation">{</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@param</span> <span class="token parameter">metadataReader</span>        读取当前正在扫描类的信息
   * <span class="token keyword">@param</span> <span class="token parameter">metadataReaderFactory</span> 读取其他类的信息
   * <span class="token keyword">@return</span> 返回True代表匹配过滤
   */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">match</span><span class="token punctuation">(</span><span class="token class-name">MetadataReader</span> metadataReader<span class="token punctuation">,</span> <span class="token class-name">MetadataReaderFactory</span> metadataReaderFactory<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当前类的原信息</span>
    <span class="token class-name">ClassMetadata</span> classMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getClassMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 类的注解的原信息</span>
    <span class="token class-name">AnnotationMetadata</span> annotationMetadata <span class="token operator">=</span> metadataReader<span class="token punctuation">.</span><span class="token function">getAnnotationMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取其他类型信息</span>
    metadataReaderFactory<span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span><span class="token string">&quot;TestClassName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 可以在@ComponentmScan中扫描</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;com.zhoutao123.spring&quot;</span><span class="token punctuation">,</span> excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">Controller</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">CustomTypeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">CUSTOM</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="作用域-scope" tabindex="-1"><a class="header-anchor" href="#作用域-scope" aria-hidden="true">#</a> 作用域 <code>@Scope</code></h2><p>默认情况下，从上下文Context获取的Bean都是单例的，可以用下面的代码验证</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">Student</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Student</span> bean2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span> bean <span class="token operator">==</span> bean2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一些情况下，我们希望每次获取都是一个新的Bean，这时候可以使用 <code>@Scope</code> 注解的方式来实现， <code>@Scope</code> 的value = &#39;singleton&#39; 标识默认单例模式，value=&#39;prototype&#39; 标识Bean 是多实例模式</p><ul><li>[x] 单实例对象：在IOC容器创建的时候创建Bean</li><li>[x] 多实例对象:  在获取Bean的时候，在生成对象</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  

  <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">)</span> <span class="token comment">// value取值可以是 singleton,prototype,request 以及 session</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;测试Bean&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">student2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setLessonList</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Math&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;English&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;燕归来兮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> student<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>


	<span class="token comment">// 断言测试不相等</span>
    <span class="token class-name">Student</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Student</span> bean2 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span> bean <span class="token operator">!=</span> bean2<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="懒加载-lazy" tabindex="-1"><a class="header-anchor" href="#懒加载-lazy" aria-hidden="true">#</a> 懒加载 <code>@Lazy</code></h2><p>Bean 的懒加载模式，<em><strong>仅针对于单实例模式，Bean将程序第一次获取从上下文中的时候创建Bean对象</strong></em>，通常在有Bean注解的方法添加注解 <code>@Lazy</code> 即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Lazy</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;测试Bean&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setLessonList</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;Math&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;English&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;燕归来兮&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> student<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="条件注入-conditional" tabindex="-1"><a class="header-anchor" href="#条件注入-conditional" aria-hidden="true">#</a> 条件注入 <code>@Conditional</code></h2><p>满足条件，则向容器中注入，不满足则不注入，从Spring4.0 开始实现的方式。自定义Condition需要实现 <code>Condition</code> 接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomConditional</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>


  <span class="token doc-comment comment">/**
   * <span class="token keyword">@param</span> <span class="token parameter">context</span>  上下文
   * <span class="token keyword">@param</span> <span class="token parameter">metadata</span> 注释的的原信息
   */</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> context<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 获取BeanFactory</span>
    <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取类加载器</span>
    <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取环境信息</span>
    <span class="token class-name">Environment</span> environment <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> osName <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;os.name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>osName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Windows&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> osName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Linux&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Bean上添加注解 <code>@Conditional</code>  注解即可实现动态注入, 标注在类上，具有影响类的全部方式的效果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">CustomConditional</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;测试Bean&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span>  <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="手动注入-import" tabindex="-1"><a class="header-anchor" href="#手动注入-import" aria-hidden="true">#</a> 手动注入 <code>@Import</code></h2><h3 id="使用-import" tabindex="-1"><a class="header-anchor" href="#使用-import" aria-hidden="true">#</a> 使用 <code>@Import</code></h3><p>使用 <code>@Bean</code> 注解并不是唯一注入 Bean 的方式，在一些简单的的对象，通常可以直接使用@Import来注解使用 <code>无参构造注入器</code> 注入对象，比如下面两种方式结果是一样</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">MainCoinfig</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-importselector" tabindex="-1"><a class="header-anchor" href="#使用-importselector" aria-hidden="true">#</a> 使用 <code>@ImportSelector</code></h3><p><code>@Import</code> 注解可以填写需要进行无参构造注入的Bean的class对象，同时也可以自定义一个 <code>ImportSelector</code> 对象或者 <code>ImportBeanDefinitionRegistrar</code>  来动态的注入所需要的Bean,定义一个CustomerImportSelector需要继承 <code>org.springframework.context.annotation.ImportSelector</code>  然后重写 <code>selectImports</code> 返回一个字符串数组，该数组包含需要Import的全类名，该对象可以返回空数组，但不能返回null，否则会报错 <code>NullPointException</code></p><p>自定义ImportSelector 的方式如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 演示获取到全类名</span>
    <span class="token class-name">String</span> clazzName <span class="token operator">=</span> <span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>clazzName<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 在启动的配置类上添加@Import注解，@Import({Color.class, CustomerImportSelector.class})</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-importbeandefinitionregistrar" tabindex="-1"><a class="header-anchor" href="#使用-importbeandefinitionregistrar" aria-hidden="true">#</a> 使用 <code>@ImportBeanDefinitionRegistrar</code></h3><p>定义一个自定义的ImportBeanDefinitionRegistrar 需要继承 <code>org.springframework.context.annotation.ImportBeanDefinitionRegistrar</code> 并重写 <code>registerBeanDefinitions</code> 方法，示例代码展示的是如果存在名称为apple的Bean，则注册一个BeanName=size的新的Bean，示例代码如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerImportBeanDefinitionRegister</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>
  
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span>
      <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">,</span> <span class="token class-name">BeanNameGenerator</span> importBeanNameGenerator<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> hasAppleComponent <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasAppleComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">RootBeanDefinition</span> definition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;size&quot;</span><span class="token punctuation">,</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 同样也需要在 @Import({ImportBeanDefinitionRegistrar.class}) </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-factorybean" tabindex="-1"><a class="header-anchor" href="#使用-factorybean" aria-hidden="true">#</a> 使用 <code>FactoryBean</code></h3><p>同样的使用Spring提供的FactoryBean也可以手动注入Bean对象, 创建自定义的SpringFactoryBean 需要继承 <code>org.springframework.beans.factory.FactoryBean</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Size</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Size</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Size</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 是否是单例模式</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token comment">// 注入 FactoryBean 对象 </span>
 <span class="token annotation punctuation">@Bean</span>
 <span class="token keyword">public</span> <span class="token class-name">CustomerFactoryBean</span> <span class="token function">factoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意，<strong>虽然注入的 CustomerFactoryBean，但是从IOC 容器中获取到 BeanName = &#39;factoryBean&#39; 其类型不是CustomerFactoryBean，而是这个FactoryBean的构造Bean，如果需要获取其对应的FactoryBean对象实例，则需要在BeanNam前面加上 &#39;&amp;&#39; 符号</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">MainConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token class-name">Object</span> bean1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;factoryBean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span> bean1 <span class="token keyword">instanceof</span> <span class="token class-name">Size</span><span class="token punctuation">;</span>

    bean1 <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;factoryBean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">assert</span> bean1 <span class="token keyword">instanceof</span> <span class="token class-name">CustomerFactoryBean</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","004.Spring_常用注解示例.html.vue"]]);export{r as default};
