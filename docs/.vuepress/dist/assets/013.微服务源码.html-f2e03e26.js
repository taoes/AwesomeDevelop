import{_ as a,o as n,c as s,e as t}from"./app-d035ab8f.js";const e={},o=t(`<p>[toc]</p><h2 id="微服务优点" tabindex="-1"><a class="header-anchor" href="#微服务优点" aria-hidden="true">#</a> 微服务优点</h2><p>拓展方便，可以部分更新项目，易于水平伸缩。运维角度复杂较高，分布式事务造成数据不一致的问题。</p><h3 id="dubbo-框架" tabindex="-1"><a class="header-anchor" href="#dubbo-框架" aria-hidden="true">#</a> Dubbo 框架</h3><p>Dubbo是阿里巴巴开源的基于 Java 的高性能 RPC 分布式服务框架，现已成为 Apache 基金会孵化项目。</p><ul><li><p>选用Dubbo的原因： 文档完善，有大型项目的使用经验。微服务这块除了服务器调用，还需要处理集群部署，服务上下线感知，超时，重试等机制，而Dubbo则提供了完善的相关服务</p></li><li><p>Dubbo 支持众多协议： dubbo/rmi/hessian/http等</p></li><li><p>Dubbo默认使用ZK作为注册中心，同时也支持Redis等其他组件作为注册中心</p></li></ul><h4 id="dubbo-内置角色" tabindex="-1"><a class="header-anchor" href="#dubbo-内置角色" aria-hidden="true">#</a> Dubbo 内置角色</h4><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td>Provider</td><td>暴露服务的服务提供方</td></tr><tr><td>Consumer</td><td>调用远程服务的服务消费方</td></tr><tr><td>Registry</td><td>服务注册与发现的注册中心</td></tr><tr><td>Monitor</td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td>Container</td><td>服务运行容器</td></tr></tbody></table><ul><li><p>Consumer 端提供了timeout(超时时间)、retries(重试次数)、loadbalance(LB策略)、actives(最大并发限制)</p></li><li><p>Dubbo启动时候，如果依赖服务不可用，Dubbo会抛出异常，阻止Spring项目初始化，可以通过Check完成关闭检查</p></li><li><p>Dubbo启动流程:</p><ul><li>P-&gt;R: (初始) 注册</li><li>C-&gt;R: (初始) 订阅服务提供者信息</li><li>R-&gt;C: (异步) 推送变动通知</li><li>C-&gt;P: (同步) 发送请求，同步执行</li><li>C-&gt;M: (异步) 发送统计数据</li><li>P-&gt;M: (异步) 发送统计数据</li></ul></li></ul><h4 id="dubbo-的集群容错-提供者或者消费者配置" tabindex="-1"><a class="header-anchor" href="#dubbo-的集群容错-提供者或者消费者配置" aria-hidden="true">#</a> Dubbo 的集群容错(提供者或者消费者配置)</h4><ul><li>故障转移 failover: 失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。可通过 <code>retries=&quot;2&quot;</code> 来设置重试次数(不含第一次)。</li><li>快速失败 Failfast Cluster: 快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录</li><li>安全失败 Failsafe Cluster: 失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作</li><li>并发请求 Forking Cluster: 并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过 forks=&quot;2&quot; 来设置最大并行数</li><li>自动恢复 Failback Cluster: 失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>cluster <span class="token operator">=</span> <span class="token string">&quot;failover&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="dubbo-的负载均衡" tabindex="-1"><a class="header-anchor" href="#dubbo-的负载均衡" aria-hidden="true">#</a> Dubbo 的负载均衡</h4><ul><li>支持一致性HASH，随机，轮询以及最少连接</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>loadbalance<span class="token operator">=</span><span class="token string">&quot;random&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="dubbo-直连" tabindex="-1"><a class="header-anchor" href="#dubbo-直连" aria-hidden="true">#</a> Dubbo 直连</h4><p>开发环境需要绕过注册中心，直接调用服务提供者,在客户端中，通过 url 配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">&quot;dubbo://localhost:20890&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="dubbo-多协议" tabindex="-1"><a class="header-anchor" href="#dubbo-多协议" aria-hidden="true">#</a> Dubbo 多协议</h4><p>Dubbo 支持多种协议，比如大数据小并发适合短连接，小数据大并发适合长连接</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dubbo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20880<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>protocol</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hessian<span class="token punctuation">&quot;</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>208801<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">dubbo:</span>protocol</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在服务提供者中使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span> weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>protocol <span class="token operator">=</span> <span class="token string">&quot;hessian&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="dubbo-服务分组" tabindex="-1"><a class="header-anchor" href="#dubbo-服务分组" aria-hidden="true">#</a> Dubbo 服务分组</h4><p>应用在一个接口有多重实现的场景</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 客户端分组</span>
<span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string">&quot;USER&quot;</span><span class="token punctuation">)</span>

<span class="token comment">// 服务端分组</span>
<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string">&quot;PERSON&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dubbo-结果缓存" tabindex="-1"><a class="header-anchor" href="#dubbo-结果缓存" aria-hidden="true">#</a> Dubbo 结果缓存</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 客户端分组</span>
<span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string">&quot;USER&quot;</span><span class="token punctuation">,</span>cache<span class="token operator">=</span><span class="token string">&quot;lru&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="dubbo-优雅停机" tabindex="-1"><a class="header-anchor" href="#dubbo-优雅停机" aria-hidden="true">#</a> Dubbo 优雅停机</h4><ul><li>服务端: 停机前不接受新的请求，并处理完剩余请求</li><li>消费端: 停机前不发送新的请求，并检查剩余请求是否完成</li></ul><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">dubbo.service.shutdown.wait</span><span class="token punctuation">=</span><span class="token value attr-value">15000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="dubbo-最佳实践" tabindex="-1"><a class="header-anchor" href="#dubbo-最佳实践" aria-hidden="true">#</a> Dubbo 最佳实践</h4><ul><li>分包: 将Model，Interface以及Exception单独放在一个API包中，实现重用发布等价原则(REP)，共同重用原则(CRP)</li><li>粒度: 每个服务的粒度尽量大</li><li>版本: 为了兼容服务，每个服务最好配置版本号</li><li>序列化： 建议使用POJO接口，而不是接口，因为数据模型抽象的意义不大，并且反序列化的时候还需要额外的元信息</li><li>异常： 建议直接抛出异常，而非返回错误吗</li></ul><h4 id="dubbo-spi实现" tabindex="-1"><a class="header-anchor" href="#dubbo-spi实现" aria-hidden="true">#</a> Dubbo SPI实现</h4><ul><li>Java中SPI的实现主要是步骤是</li></ul><ol><li>定义接口com.interface.A</li><li>定义接口的A的实现类com.interface.A1，com.interface.A2以及com.interface.A3</li><li>在ClassPath目录下创建 <code>META-INF/service/com.interface.A</code> 文件</li><li>在文件中记录 com.interface.A1，com.interface.A2以及com.interface.A3</li><li>代码中就可以使用</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> spiLoader <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">&gt;</span></span>  iteratorSpi <span class="token operator">=</span> spiLoader<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>iteratorSpi<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token class-name">A</span> aService<span class="token operator">=</span>iteratorSpi<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	aService<span class="token punctuation">.</span><span class="token function">xxxxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Dubbo 中的SPI主要用来实现各种拓展的，比如序列化的拓展，协议的拓展，负载均衡的拓展等等</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Protocol</span> protocol <span class="token operator">=</span> <span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">Protocol</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAdaptiveExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>JavaSPI不支持通过KEY获取单个示例，也不支持依赖注入和AOP，因此DubboSPI模仿JavaSPI实现了一套自己的SPI机制</li></ul><h2 id="dubbo-和-springcloud-的区别" tabindex="-1"><a class="header-anchor" href="#dubbo-和-springcloud-的区别" aria-hidden="true">#</a> Dubbo 和 SpringCloud 的区别</h2><ul><li>Dubbo 使用的是RPC通讯的方式，SpringCloud使用的则是HTTPRestful</li><li>在组件支持上的区别</li></ul><table><thead><tr><th>组件</th><th>Dubbo</th><th>Spring Cloud</th></tr></thead><tbody><tr><td>服务注册中心</td><td>Zookeeper</td><td>Spring Cloud Netflix Eureka</td></tr><tr><td>服务监控</td><td>Dubbo-monitor</td><td>Spring Boot Admin</td></tr><tr><td>断路器</td><td>不完善</td><td>Spring Cloud Netflix Hystrix</td></tr><tr><td>服务网关</td><td>无</td><td>Spring Cloud Netflix Gateway</td></tr><tr><td>分布式配置</td><td>无</td><td>Spring Cloud Config</td></tr><tr><td>服务跟踪</td><td>无</td><td>Spring Cloud Sleuth</td></tr><tr><td>消息总线</td><td>无</td><td>Spring Cloud Bus</td></tr><tr><td>数据流</td><td>无</td><td>Spring Cloud Stream</td></tr><tr><td>批量任务</td><td>无</td><td>Spring Cloud Task</td></tr><tr><td>...</td><td>...</td><td>...</td></tr></tbody></table>`,43),p=[o];function l(i,c){return n(),s("div",null,p)}const d=a(e,[["render",l],["__file","013.微服务源码.html.vue"]]);export{d as default};
