import{_ as n,o as a,c as s,e}from"./app-d035ab8f.js";const p="/assets/nginx代理-d856eb48.png",i="/assets/注册中心-5db0e3e6.png",t={},l=e('<h1 id="服务注册与发现" tabindex="-1"><a class="header-anchor" href="#服务注册与发现" aria-hidden="true">#</a> 服务注册与发现</h1><p>微服务重要的概念就是将一个单体应用拆分为多个不同的服务，消费者与服务者之间通过轻量级的HTTP请求相互提供服务，那么服务与服务之间如何实现发现的，将是微服务面临的首要问题。</p><h2 id="实现方案" tabindex="-1"><a class="header-anchor" href="#实现方案" aria-hidden="true">#</a> 实现方案</h2><p>在以前的项目架构中，服务于服务中间相互发现主要有以下的方式：</p><ul><li>[x]  IP直接的方式： 这种方式将提供某种服务的写死在配置文件中，需要指定服务的时候，通过查询的方式，查到对方服务的IP和端口，这种方式不够灵活，且对于大量的集群服务而言，工作量复杂且容易出错。</li><li>[x] 使用主机名的方式： 将IP映射为主机名，这种方式的本质还是IP的方式，所以不能从根本上解决问题</li><li>[x] 使用DNS作为服务转发</li><li>[x] 使用Nginx代理： Ngixn对外提供统一的网关，消费者通过网关调用，所以此时服务提供者对于消费者而言是透明的。但大量的配置工作转移到了服务提供者这边配置，依然没有解决大量的繁重工作的问题</li></ul><p><img src="'+p+'" alt="image.png"></p><ul><li>[x] 使用注册中心： 目前的主流方式是使用注册中心，注册中心有多种实现方案，比如Zookeeper，Redis等等，其基本的架构图如下所示。</li></ul><p><img src="'+i+`" alt="image.png"></p><h2 id="netflix-eureka" tabindex="-1"><a class="header-anchor" href="#netflix-eureka" aria-hidden="true">#</a> Netflix Eureka</h2><p>Eureka 是Netflix公司开发的一款注册中心组件，基于HTTP服务协议与 各个消费者和提供者进行通信，包括注册(Registry)和心跳(HeartBeat)，续约(Renew)等能力。SpringCloud基于Eureka提供了SpringCloud的组件，可以直接在项目中使用。</p><p><em><strong>Eureka 在项目的使用中，主要包括两个部分，服务端以及客户端，或者称之为EurekaService &amp; EurekaClient，</strong><strong><strong>服务端是提供注册的，是注册中心；</strong></strong><strong>客</strong>__<strong>户端是各个提供服务或者消费服务的组件</strong></em>。基于CAP理论，Eureka实现了AP两个，并未实现强一致性，所以当服务下线的时候，客户端可能并未及时的接收到服务下线的通知。其基本架构如下:</p><ul><li>[x]  EurekaService 提供了相互注册高可用的能力</li><li>[x]  EurekaClient 分别向多个注册中心注册服务</li><li>[x]  EurekaClient 定时(默认30s)的向注册中心发送心跳包,已证明自己存活</li><li>[x]  EurekaClinet 会从注册中心拉取其他服务的信息，缓存到本地中</li><li>[x] EurekaService 默认开启保护模式，即发现短时间大量服务掉线的时候，会认为出现网络波动，而非服务掉线，所以并不会将服务标记为DOWN</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/437981/1590135838104-9d0883e8-8d79-4327-abd4-d3508b0b65dd.png#align=left&amp;display=inline&amp;height=265&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=928&amp;originWidth=1958&amp;size=216741&amp;status=done&amp;style=none&amp;width=560" alt="image.png"></p><h3 id="实现-eurekaservice" tabindex="-1"><a class="header-anchor" href="#实现-eurekaservice" aria-hidden="true">#</a> 实现 EurekaService</h3><p>Eureka可以单独使用，但是SpringCloud提供了适用于SpringBoot应用的库，所以我们没有必要再次封装，直接依赖SprigCloud提供的依赖即可。</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>buildscript <span class="token punctuation">{</span>
    ext <span class="token punctuation">{</span>
        springBootVersion <span class="token operator">=</span> <span class="token string">&#39;2.0.5.RELEASE&#39;</span>
        springCloudVersion <span class="token operator">=</span> <span class="token string">&#39;Finchley.SR1&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-server&#39;</span><span class="token punctuation">)</span>
compile <span class="token punctuation">(</span><span class="token string">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和SpringBoot异常，创建一个SpringBoot应用, 在启动的类上添加注解 <code>@EnableEurekaServer</code>  该注解会向SpringIOC中注入 <code>EurekaServerMarkerConfiguration</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>eureka<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span><span class="token class-name">EnableEurekaServer</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaServiceApplication</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaServiceApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改配置文件 <code>application.yml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">server</span><span class="token punctuation">:</span>
    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 关闭保护模式</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token comment"># 定义不需要从注册中心拉取信息，如果是多个注册中心实例，则需要开启从其他注册中心拉取的功能</span>
    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment"># 定义不需要注册，单注册中心不需要向其他注册中心注册，如果是多个注册中心实例，则需要开启向其他注册中心注册的功能</span>
    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment"># 定义注册中心地址</span>
    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>
      <span class="token comment"># 如果有多个注册中心，则需要相互注册，那么这里则需要写上多个地址，中间使用逗号分割</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka

<span class="token comment"># 定义应用名称，这里非常重要，服务名称将是后期SpringCloud各个服务之间通讯的手段</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>service

<span class="token comment"># 定义服务的接口</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9900</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动程序 <code>EurekaServiceApplication</code> 访问 <code>localhost:9900</code> 如果可以正常看到SpringCloud的Eureka的界面，就表示注册中心搭建完成.</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/437981/1590150541705-a34c8685-bd6f-4971-a79e-8234707f3bd2.png#align=left&amp;display=inline&amp;height=765&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=1530&amp;originWidth=3358&amp;size=259818&amp;status=done&amp;style=none&amp;width=1679" alt="image.png"></p><h3 id="实现-eurekaclient" tabindex="-1"><a class="header-anchor" href="#实现-eurekaclient" aria-hidden="true">#</a> 实现 EurekaClient</h3><p>创建一个新的SpringBoog项目，添加如下依赖</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>buildscript <span class="token punctuation">{</span>
    ext <span class="token punctuation">{</span>
        springBootVersion <span class="token operator">=</span> <span class="token string">&#39;2.0.5.RELEASE&#39;</span>
        springCloudVersion <span class="token operator">=</span> <span class="token string">&#39;Finchley.SR1&#39;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">&#39;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&#39;</span><span class="token punctuation">)</span>
compile <span class="token punctuation">(</span><span class="token string">&#39;org.springframework.boot:spring-boot-starter-web&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同创建Eureka服务端一样，创建SpringBoot启动类，添加注解 <code>@EnableEurekaClient</code> 注意此处和EurekaService 添加的注解并不一样。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserApplication</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">UserApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的这里需要修改配置文件 <code>application.yml</code> 文件，指定注册中心的URL</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>eureka<span class="token operator">:</span>
  instance<span class="token operator">:</span>
    hostname<span class="token operator">:</span>  node2
  client<span class="token operator">:</span>
    # 由于是<span class="token class-name">EurekaClient</span>需要从向注册中心注册以及从注册中心拉取其他客户端的注册数据
    # 所以这里的值均为 <span class="token boolean">true</span>
    fetch<span class="token operator">-</span>registry<span class="token operator">:</span> <span class="token boolean">true</span>
    register<span class="token operator">-</span><span class="token keyword">with</span><span class="token operator">-</span>eureka<span class="token operator">:</span> <span class="token boolean">true</span>
    # 指定注册中心的<span class="token constant">URL</span>
    service<span class="token operator">-</span>url<span class="token operator">:</span>
	  # 如果有多个注册中心，这里则需要写上多个地址，中间使用逗号分割
      defaultZone<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">9900</span><span class="token operator">/</span>eureka
# 定义应用名称      
spring<span class="token operator">:</span>
  application<span class="token operator">:</span>
    name<span class="token operator">:</span> user
    
# 定义启动端口
server<span class="token operator">:</span>
  port<span class="token operator">:</span> <span class="token number">9990</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动完成后后，查看注册中心的界面，可以看到USER应用已经正常被注册到EurekaService</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/437981/1590151287527-c018b50c-a226-4714-b14b-76b655ba3a56.png#align=left&amp;display=inline&amp;height=412&amp;margin=[object Object]&amp;name=image.png&amp;originHeight=824&amp;originWidth=3358&amp;size=126816&amp;status=done&amp;style=none&amp;width=1679" alt="image.png"></p><h3 id="原理分析" tabindex="-1"><a class="header-anchor" href="#原理分析" aria-hidden="true">#</a> 原理分析</h3><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-hidden="true">#</a></h2><h2 id="alibaba-naocs" tabindex="-1"><a class="header-anchor" href="#alibaba-naocs" aria-hidden="true">#</a> Alibaba Naocs</h2><p>Naocs是阿里巴巴开发的一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。可以快速的集成到Dubbo/SpringCloud/K8s等。 Naocs具有以下的特性:</p><ul><li>[x]  动态配置服务</li><li>[x] 服务发现及管理</li><li>[x] 动态DNS服务</li></ul><blockquote><p>更多的关于Naocs的使用笔记，等笔者有时间在做这一块~</p></blockquote>`,38),o=[l];function c(r,u){return a(),s("div",null,o)}const k=n(t,[["render",c],["__file","服务注册与发现.html.vue"]]);export{k as default};
