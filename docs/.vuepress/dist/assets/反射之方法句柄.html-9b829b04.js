import{_ as a,r as e,o as t,c as p,a as n,d as o,b as c,e as l}from"./app-d035ab8f.js";const i={},u=l(`<p>方法句柄(method handle)是JSR 292中引入的一个重要概念，它是对Java中方法、构造方法和域的一个强类型的可执行的引用。这也是句柄这个词的含义所在。通过方法句柄可以直接调用该句柄所引用的底层方法。从作用上来说，方法句柄的作用类似于2.2节中提到的反射API中的Method类，但是方法句柄的功能更强大、使用更灵活、性能也更好。实际上，方法句柄和反射API也是可以协同使用的，下面会具体介绍。在Java标准库中，方法句柄是由java.lang.invoke.MethodHandle类来表示的。<br></p><p><a name="aiOLg"></a></p><h2 id="方法类型的定义" tabindex="-1"><a class="header-anchor" href="#方法类型的定义" aria-hidden="true">#</a> 方法类型的定义</h2><p>对于一个方法句柄来说，它的类型完全由它的参数类型和返回值类型来确定，而与它所引用的底层方法的名称和所在的类没有关系，或者这样说对于一个方法而言，其方法由方法名以及参数类型和返回值类型，在方法名确定的情况下，可以通过参数类型和返回值类型来找到方法。<br>  在得到一个方法句柄，即MethodHandle类的对象之后，可以通过其type方法来查看其类型。该方法的返回值是一个java.lang.invoke.MethodType类的对象。MethodType类的所有对象实例都是不可变的，类似于String类。所有对MethodType类对象的修改，都会产生一个新的MethodType类对象。两个MethodType类对象是否相等，只取决于它们所包含的参数类型和返回值类型是否完全一致。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 无参数，返回一个int类型的方法类型，比如 String类型的 length 方法</span>
<span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 接收一个字符串类型，返回一个字符串类型，比如 String 类型的  concat 方法</span>
<span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//  接收两个int类型的参数，返回一个  Character类型的数据，比如String的 subSequence 方法</span>
<span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br>除了通过 <code>methodType</code> 方法构建方法句柄之外，也可以通过<code>genericMethodType</code> 来构建一个通用的方法句柄</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建一个通用的 方法句柄，接收3个Object类型的数据，返回一个Object类型的数据</span>
<span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">genericMethodType</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 第二个参数标识返回值是否是 Object[]</span>
<span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">genericMethodType</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br>除此之外，还有不太常用的方法声明<code>fromMethodDescriptorString</code> 它提供了通过类的全路径字符串的方式来声明方法句柄，这种方式更加的简洁，但可读性以及对不熟悉的类的全路径名的方式的开发者不太适合。需要注意的是，此方法需要提供一个类加载器，这个类加载器将用来加载类，如果不指定，将默认使用系统加载器(或称之为应用类加载器)。</p><blockquote><p>官方称这种类型的字符串为 <em>a bytecode-level type descriptor string &quot;(T...)T&quot;</em></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ClassLoader</span> cl<span class="token operator">=</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> descriptor<span class="token operator">=</span><span class="token string">&quot;(Ljava/lang/Character;)Ljava/lang/String;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 声明了参数为 Character  返回值为String类型</span>
<span class="token class-name">MethodType</span> mt1<span class="token operator">=</span><span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">fromMethodDescriptorString</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">,</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br>在方法句柄构造完成后，仍然可以对其进行修改，和String类一样，修改后返回的都是一个新的 <code>MethodType</code>的实例。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MethodType</span> mt <span class="token operator">=</span> <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 增加一个参数类型</span>
mt<span class="token operator">=</span>mt<span class="token punctuation">.</span><span class="token function">appendParameterTypes</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在第一个参数位置新增参数类型 </span>
mt<span class="token operator">=</span>mt<span class="token punctuation">.</span><span class="token function">insertParameterTypes</span><span class="token punctuation">(</span><span class="token number">1</span>，<span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 删除指定位置的参数类型</span>
mt<span class="token operator">=</span>mt<span class="token punctuation">.</span><span class="token function">dropParameterTypes</span><span class="token punctuation">(</span><span class="token number">2</span>，<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 修改参数类型</span>
mt<span class="token operator">=</span>mt<span class="token punctuation">.</span><span class="token function">changeParameterType</span><span class="token punctuation">(</span><span class="token number">2</span>，<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 修改返回值类型</span>
mt<span class="token operator">=</span>mt<span class="token punctuation">.</span><span class="token function">changeReturnType</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="IvKH1"></a></p><h2 id="方法句柄的获取-使用" tabindex="-1"><a class="header-anchor" href="#方法句柄的获取-使用" aria-hidden="true">#</a> 方法句柄的获取 &amp; 使用</h2><p>在构造完方法句柄之后，可以直接调用任何方法，这里的方法包括公有方法，私有方法，甚至 native 方法，这也是 <code>Method</code> 所不能比拟的。下面是一个简单的使用示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义方法类型 MethodType</span>
<span class="token class-name">MethodType</span> methodType <span class="token operator">=</span> <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过 findVirtual 获取方法句柄</span>
<span class="token class-name">MethodHandle</span> methodHandle <span class="token operator">=</span> <span class="token class-name">MethodHandles</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findVirtual</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;substring&quot;</span><span class="token punctuation">,</span> methodType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用方法句柄执行方法</span>
<span class="token class-name">Object</span> invoke <span class="token operator">=</span> methodHandle<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">&quot;你好，欢迎您来到MethodHandles&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 一些断言</span>
<span class="token keyword">assert</span> invoke <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span>
<span class="token keyword">assert</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>invoke<span class="token punctuation">,</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><br>上面的示例中是获取类的实例方法，通过还有一些静态方法，等其他方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">MethodType</span> methodType1 <span class="token operator">=</span> <span class="token class-name">MethodType</span><span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MethodHandle</span> handle <span class="token operator">=</span> <span class="token class-name">MethodHandles</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findStatic</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;abs&quot;</span><span class="token punctuation">,</span> methodType1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> invoke1 <span class="token operator">=</span> handle<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>invoke1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>参考文章</li></ul>`,19),k={href:"https://www.cnblogs.com/tangliMeiMei/archive/2020/05/28/12983627.html",target:"_blank",rel:"noopener noreferrer"};function d(r,m){const s=e("ExternalLinkIcon");return t(),p("div",null,[u,n("ol",null,[n("li",null,[n("a",k,[o("Java 方法句柄 https://www.cnblogs.com/tangliMeiMei/archive/2020/05/28/12983627.html"),c(s)])])])])}const b=a(i,[["render",d],["__file","反射之方法句柄.html.vue"]]);export{b as default};
