import{_ as p,r as e,o,c,a as n,d as s,b as l,e as a}from"./app-d035ab8f.js";const i={},u=a(`<p>NPE异常是一个非常常见的异常信息，但是其造成的危害却不可忽视。在本周以及上周的编写代码以及阅读代码的过程，发现应用中出现NPE的原因主要有三种</p><ol><li>调用某个方法，该方法返回 null 未判断 造成了NPE</li><li>不熟悉或者遗忘某个方法的逻辑，导致传入参数为NULL，造成了NPE</li><li>使用某个对象对其中的内部成员不熟悉，直接使内部成员，造成了NPE</li></ol><p><br> <strong>虽然我们可以通过 if或者断言等语句来避免出现NPE，但是这种方式对代码的结构以及代码的可阅读性造成了一些影响，过于复杂的判断后期自己可能都会迷惑，所以我们的目标是在不影响代码阅读性的同时降低NPE出现的概率，减少NPE的出现。</strong><br>​</p><p>下面总结了一些个人日常开发的面对NPE的解决的小技巧, 希望起到抛砖引玉的作用，希望各位大佬抛出更多的意见和想法！<br></p><p><a name="idTUl"></a></p><h2 id="_1、-nullable-与-nonnull-注解" tabindex="-1"><a class="header-anchor" href="#_1、-nullable-与-nonnull-注解" aria-hidden="true">#</a> 1、@Nullable 与 @Nonnull 注解 <br><br></h2><ul><li>针对原因1，对于方法的返回，对方法的返回值肯定非常的熟悉，因此方法的作者可以通过一些注解来标注这个方法返回值有没有可能为NULL，如下</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 该注解标注方法返回值不可能为null</span>
<span class="token annotation punctuation">@Nonnull</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 该注解标注返回值可能为null</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用 <code>findById(Long)</code> 方法的时候，<strong>就会知道此方法不可能返回NULL，因此可以不用进行判空，当存在判空的代码时候IDEA会提示代码冗余</strong>。<br>当使用<code>findByName()</code> 方法的时候，<strong>就会方法有可能返回NULL，因此需要对返回值做空值判断，如果不做判空的检查，直接使用，IDEA则会提示有可能出现NPE</strong></p><ul><li>同样的针对原因2，也是可以在参数上添加相应的注解，比如下面的 <code>findByName(String name)</code> 我们在使用的时候就知道 name 不能传入一个空值，传入的话可能造成NPE</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 如果要求某个参数不能为空，可以声明此参数不能为null，那么在调用方法之前就需要进行判空检查</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findByName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nonnull</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token comment">// 如果已经对某个参数进行了判空校验，可以声明此参数可以为null</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token keyword">return</span> xxx<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
    <span class="token keyword">return</span> xxx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时针对 <code>@Nullable 以 @Nonnull</code>的话，在添加相应的注解之后，IDEA对此也有检查和自动提示的功能</p><ol><li>方法参数声明了<a href="/Nullable">@Nullable </a> 但在方法内使用的时候却没有判空，IDEA 则会提示可能出现NPE；</li><li>当方法参数不允许为NULL的时候，如果传入NULL，IDEA会提示；方法内部仍对此参数判空的时候则会提示代码冗余。</li><li>需要注意的是，这里的注解需要时 jsr305 中所定义的包(即javax.annotation包下的注解)，IDEA、Sonar 以及 Findbugs 等工具均支持此注解，而对于Lombok的注解的支持则不太好</li></ol><p><br>因此，在方法的返回值以及参数上标注相应的注解，可以给我们带来开发的方便同时也能减少不必要的代码，<strong>但是这种提示太弱，大部分同学都会忽略IDEA的提示</strong>，所以有的时候是需要强提示的。<br>​<br><a name="Phru2"></a></p><h2 id="_2、optional-option" tabindex="-1"><a class="header-anchor" href="#_2、optional-option" aria-hidden="true">#</a> 2、Optional &amp; Option</h2><p>众所周知，<strong>Java8 提出一个Optional的一个类，它能够有效的避免NPE，同时结合Lambda表达式也会使代码更清晰</strong>。上文中即使我们通过@Nullable注解来标注方法的返回值可能为空，但其值也可以不判断直接使用，而使用Optioanl的时候则不能直接使用，需要首先判断一下才能使用, 如果直接使用IDEA也会提示 可能出现NPE。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">{</span>

    <span class="token comment">// 查询张三的同桌的同桌的同桌的姓名，结合Lambda 表达式，代码也更清晰</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 参数要求不能为NULL，IDEA自动提示不能为NULL</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> stuOptional <span class="token operator">=</span> <span class="token function">findNickName</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
         deskMateName <span class="token operator">=</span> stuOptional
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getDeskMate</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getDeskMate</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getDeskMate</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;未知&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>deskMateName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    
    <span class="token doc-comment comment">/** 标注返回值可能返回 Optioanl.empty() */</span>
    <span class="token keyword">private</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">findNickName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    
    
    <span class="token doc-comment comment">/** 标注参数值可能为 Optioanl.empty() */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> param<span class="token punctuation">)</span><span class="token punctuation">{</span>
    	<span class="token comment">// 在此场景下，param是允许接受空值的 在使用param的时候应当去判断下</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>param<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        	<span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// .....</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Student</span> deskMate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),k={href:"https://docs.vavr.io/#_option",target:"_blank",rel:"noopener noreferrer"},d=a(`<p><strong>​</strong></p><p><strong>​</strong></p><p><strong>​</strong><br></p><hr><p>某些场景下合理利用Optional类来实现代码，有时候甚至可以减少代码复杂度，比如下面的代码中获取一个学生的同桌的名称的大写，如果学生名称暂未录入则返回&quot;NOT_CONFIG&quot;, 可以看到下面的方法中显然下面的到吗更清晰，更简洁，减少了一个 if 结构</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 常规方法</span>
<span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> stu <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> stu<span class="token punctuation">.</span><span class="token function">getDeskMate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> stu<span class="token punctuation">.</span><span class="token function">getDeskMate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> stu<span class="token punctuation">.</span><span class="token function">getDeskMate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token string">&quot;NO_CONFIG&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Optional</span>
<span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token class-name">Optioanl</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getDeskMate</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">orElese</span><span class="token punctuation">(</span><span class="token string">&quot;NO_CONFIG&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function r(m,v){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("同样的Guava 也提出过 类似的Optional的操作方式，后来Java8 引入此模式，但是，对于深度使用此模式的开发者来说，Optional的功能仍然太浅，"),n("strong",null,[s("有兴趣的同学可以了解下 "),n("strong",null,[n("a",k,[s("VAVR "),l(t)])]),s(" 所提供的Lambda 表达式的拓展库，其内提供了更为强大的 Option")])])]),d])}const g=p(i,[["render",r],["__file","对NPE的防范与思考.html.vue"]]);export{g as default};
